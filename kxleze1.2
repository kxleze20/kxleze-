local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "kxleze Hub",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "kxleze Hub",
   LoadingSubtitle = "by kenn",
   ShowText = "Hide Script", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "KenleoexampleHub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("üëçHome", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "You Executed The Script",
   Content = "Good Luck Hub",
   Duration = 5,
   Image = nil,
})

local Button = Tab:CreateButton({
   Name = "Egg Detector",
   Callback = function()
   -- Egg Detector Script
local detector = workspace.Detector -- The part or model used as the detector (can be a part or model)
local eggTag = "Egg" -- Tag for identifying egg parts/models
local detectionRadius = 50 -- Detection radius around the detector (change as needed)

-- Function to detect eggs in the area
local function detectEggs()
    local detectorPosition = detector.Position
    local detectedEggs = {}

    -- Search for all parts within the detection radius
    for _, object in pairs(workspace:GetChildren()) do
        if object:IsA("Model") and object:FindFirstChild("Egg") then -- Check if it's tagged as an egg
            local distance = (detectorPosition - object.PrimaryPart.Position).Magnitude
            if distance <= detectionRadius then
                table.insert(detectedEggs, object)
            end
        end
    end
    
    -- Highlight detected eggs
    for _, egg in pairs(detectedEggs) do
        local highlight = Instance.new("Highlight") -- Add a highlight to the egg
        highlight.Adornee = egg
        highlight.FillColor = Color3.fromRGB(255, 255, 0) -- Yellow highlight (change as needed)
        highlight.Parent = egg
    end

    -- Output number of detected eggs
    print("Detected " .. #detectedEggs .. " egg(s).")
end

-- Detect eggs when the game starts
detectEggs()

-- Optional: Re-run the detection every few seconds (in case eggs move or are added)
while true do
    wait(5) -- Check every 5 seconds
    detectEggs()
end
   end,
})
